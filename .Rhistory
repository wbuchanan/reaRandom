#'
setMethod(f = "setIntegers",
signature("numeric", "numeric", "numeric", "numeric", "logical", "numeric"),
definition = function(id = 42, n = 1, min = 0, max = 100,
replacement = FALSE, base = 10) {
# Check number of values requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in [1, 1e4]")
# Check minimum and maximum value parameters
if (!(min %in% c(-1e9:1e9)) || !(max %in% c(-1e9:1e9))) {
stop("Minimum or Maximum value outside of [-1e9, 1e9]")
}
# Set the method slot
REARandom@method <- "generateIntegers"
# Set the ID slot
REARandom@id <- id
# Set API Method parameters
REARandom@parameters <- as.list("n" = n, "min" = min, "max" = max,
"replacement" = replacement, "base" = base)
}, valueClass = "REARandom") # End Method declaration
setGeneric("setDecimals",
def = function(id, n, decimalPlaces, replacement) {
standardGeneric("setDecimals")
}, valueClass = "REARandom")
setMethod(f = "setDecimals",
signature("numeric", "numeric", "numeric", "logical"),
definition = function(id = 42, n = 1, decimalPlaces = 1,
replacement = FALSE) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in [1, 1e4]")
# Check number of values beyond the decimal within allowed range
if (!(decimalPlaces %in% c(1:20))) stop("Parameter decimalPlaces must be in [1, 20]")
# Set the method slot
REARandom@method <- "generateDecimalFractions"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"decimalPlaces" = decimalPlaces,
"replacement" = replacement)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setNormal",
def = function(id, n, mean, standardDeviation, significantDigits) {
standardGeneric("setNormal")
}, valueClass = "REARandom")
setMethod(f = "setNormal",
signature("numeric", "numeric", "numeric", "numeric", "numeric"),
definition = function(id = 42, n = 1, mean = 0,
standardDeviation = 1, significantDigits = 2) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(mean %in% c(-1e6:1e6)) || !(standardDeviation %in% c(-1e6:1e6))) {
stop("Mean parameter outside of [-1e6, 1e6]")
}
# Check number of values beyond the decimal within allowed range
if (!(significantDigits %in% c(2:20))) stop("Parameter decimalPlaces must be in [2, 20]")
# Set the method slot
REARandom@method <- "generateGaussians"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"mean" = mean,
"standardDeviation" = standardDeviation,
"significantDigits" = significantDigits)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setStrings",
def = function(id, n, length, characters, replacement) {
standardGeneric("setStrings")
}, valueClass = "REARandom")
setMethod(f = "setStrings",
signature("numeric", "numeric", "numeric", "character", "logical"),
definition = function(id = 42, n = 1, length = 1,
characters = c(letters, LETTERS, c(0:9),
"!", "@", "#", "$", "%", "^", "&",
"-", ",", "?", "|", ":", ";", "<",
">", ",", ".", "_"),
replacement = FALSE) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(length %in% c(1:20))) stop("Length parameter outside of [1, 20]")
# Check number of values beyond the decimal within allowed range
if (!(nchar(characters) %in% c(1:80))) {
stop(paste("Characters parameter must include 1-80 characters",
"from which to construct the random string."))
}
# Set the method slot
REARandom@method <- "generateStrings"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"length" = length,
"characters" = characters,
"replacement" = replacement)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setUniqueID",
def = function(id, n) {
standardGeneric("setUniqueID")
}, valueClass = "REARandom")
setMethod(f = "setUniqueID",
signature("numeric", "numeric"),
definition = function(id = 42, n = 1) {
# Check number of random numbers requested
if (!(n %in% c(1:1e3))) stop("Parameter n must be in [1, 1e3]")
# Set the method slot
REARandom@method <- "generateUUIDs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setBLOBs",
def = function(id, n, size, format) {
standardGeneric("setBLOBs")
}, valueClass = "REARandom")
setMethod(f = "setBLOBs",
signature("numeric", "numeric", "numeric", "character"),
definition = function(id = 42, n = 1, size = 8, format = "base64") {
# Check number of random numbers requested
if (!(n %in% c(1:100))) stop("Parameter n must be in [1, 100]")
# Check the size parameter
if ((size %% 8) != 0) stop("Size parameter must be divisible by 8")
# Check the format parameter
if (!(format %in% c("base64", "hex"))) {
stop(paste("Format parameter only accepts 'base64' or 'hex'",
"as arguments.  The default is 'base64'."))
}
# Set the method slot
REARandom@method <- "generateBlobs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n, "size" = size, "format" = format)
}, valueClass = "REARandom") # End of Method declaration
?tryCatch
#' Defines the base object used for API requests
#' @title REARandom
#' @rdname REARandom
#' @author Billy Buchanan
#' @docType class
#' @aliases reaRandom
#' @details Generates a new S4 object with methods to access random numbers
#' provided by Random.org's API
#' @import methods
#' @export REARandom
#' @exportClass REARandom
#'
REARandom <- setClass(Class = "REARandom",
representation(requestHome = "character",
apiKey = "character",
jsonrpc = "character",
method = "character",
parameters = "character",
id = "numeric"))
# Validation function for Class REARandom
validREARandom <- function(object) {
if (object@requestHome != "https://api.random.org/json-rpc/1/invoke") FALSE
if (object@jsonrpc != "2.0") FALSE
if (is.null(object@apiKey) || is.na(object@apiKey)) FALSE
else TRUE
}
# Sets the validation function for object initialization
setValidity("REARandom", validREARandom)
#' Function to construct new REARandom class objects
#' @title reaRandom
#' @description Function used to create new REARandom class objects
#' @param api Takes a single character argument with either a file containing
#' the api key for Random.org, the key itself, or a NULL value.
#' @return Returns an object of class REARandom
#' @docType methods
#' @exampls \dontrun{
#'
#' 		# Create a new REARandom object in x with made up API key passed as
#' 		# an argument to the function
#' 		x <- reaRandom(api = "ABCD123456789abcd")
#'
#' 		# Same as above but assuming the API key is stored in a file on the
#' 		# local system
#' 		x <- reaRandom(api = "~/.randomOrgApiKey")
#'
#' 		# Same as above assuming the API key is stored as an option named "reaRandomKey"
#' 		x <- reaRandom()
#'
#' }
#' @export reaRandom
#'
reaRandom <- function(api = NULL) {
reaRandomObject <- new("REARandom")
reaRandomObject.setApiKey(api)
validObject(reaRandomObject)
return(reaRandomObject)
}
#' Initialization method for REARandom class
#' @rdname REARandom-class
#' @aliases intialize, REARandom-method
#'
setMethod("initialize", "REARandom",
function(.Object) {
.Object@requestHome = "https://api.random.org/json-rpc/1/invoke"
.Object@jsonrpc = "2.0"
return(.Object)
}, valueClass = "REARandom"
)
#' Generic method declaration for API Key setter
#' @title setApiKey
#' @description Method used to set the ApiKey member of the REARandom class
#' @param api A character string with the API key, a file name containing the API key, or NULL value
#' @rdname setApiKey-methods
#' @family REARandom Constructor Methods
#' @docType methods
setGeneric("setApiKey",
def = function(api) {
standardGeneric("setApiKey")
}, valueClass = "REARandom")
#' Method used to allow user to pass a file name/string with the API key
#' @title setApiKey
#' @family REARandom Constructor Methods
#' @aliases setApiKey, REARandom, character-method
#' @rdname setApiKey-methods
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("REARandom", "character"),
definition = function(api = "character") {
tryCatch({
newapikey = scan(api, what = "character")
}, error = function(e) {
newapikey = api
},
finally = {
REARandom@apiKey = newapikey
})
}, valueClass = "REARandom")
#' @family REARandom Constructor Methods
#' @aliases setApiKey, REARandom, missing-method
#' @rdname setApiKey-methods
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("missing"),
definition = function(api = NULL) {
REARandom@apiKey = getOption("reaRandomKey")
}, valueClass = "REARandom")
#' Defines the base object used for API requests
#' @title REARandom
#' @rdname REARandom
#' @author Billy Buchanan
#' @docType class
#' @aliases reaRandom
#' @details Generates a new S4 object with methods to access random numbers
#' provided by Random.org's API
#' @import methods
#' @export REARandom
#' @exportClass REARandom
#'
REARandom <- setClass(Class = "REARandom",
representation(requestHome = "character",
apiKey = "character",
jsonrpc = "character",
method = "character",
parameters = "character",
id = "numeric"))
# Validation function for Class REARandom
validREARandom <- function(object) {
if (object@requestHome != "https://api.random.org/json-rpc/1/invoke") FALSE
if (object@jsonrpc != "2.0") FALSE
if (is.null(object@apiKey) || is.na(object@apiKey)) FALSE
else TRUE
}
# Sets the validation function for object initialization
setValidity("REARandom", validREARandom)
#' Function to construct new REARandom class objects
#' @title reaRandom
#' @description Function used to create new REARandom class objects
#' @param api Takes a single character argument with either a file containing
#' the api key for Random.org, the key itself, or a NULL value.
#' @return Returns an object of class REARandom
#' @docType methods
#' @exampls \dontrun{
#'
#' 		# Create a new REARandom object in x with made up API key passed as
#' 		# an argument to the function
#' 		x <- reaRandom(api = "ABCD123456789abcd")
#'
#' 		# Same as above but assuming the API key is stored in a file on the
#' 		# local system
#' 		x <- reaRandom(api = "~/.randomOrgApiKey")
#'
#' 		# Same as above assuming the API key is stored as an option named "reaRandomKey"
#' 		x <- reaRandom()
#'
#' }
#' @export reaRandom
#'
reaRandom <- function(api = NULL) {
reaRandomObject <- new("REARandom")
reaRandomObject.setApiKey(api)
validObject(reaRandomObject)
return(reaRandomObject)
}
#' Initialization method for REARandom class
#' @rdname REARandom-class
#' @aliases intialize, REARandom-method
#'
setMethod("initialize", "REARandom",
function(.Object) {
.Object@requestHome = "https://api.random.org/json-rpc/1/invoke"
.Object@jsonrpc = "2.0"
return(.Object)
}, valueClass = "REARandom"
)
#' Generic method declaration for API Key setter
#' @title setApiKey
#' @description Method used to set the ApiKey member of the REARandom class
#' @param api A character string with the API key, a file name containing the API key, or NULL value
#' @rdname setApiKey-methods
#' @family REARandom Constructor Methods
#' @docType methods
setGeneric("setApiKey",
def = function(api) {
standardGeneric("setApiKey")
}, valueClass = "REARandom")
#' Method used to allow user to pass a file name/string with the API key
#' @title setApiKey
#' @family REARandom Constructor Methods
#' @aliases setApiKey, REARandom, character-method
#' @rdname setApiKey-methods
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("character"),
definition = function(api = "character") {
tryCatch({
newapikey = scan(api, what = "character")
}, error = function(e) {
newapikey = api
},
finally = {
REARandom@apiKey = newapikey
})
}, valueClass = "REARandom")
#' @family REARandom Constructor Methods
#' @aliases setApiKey, REARandom, missing-method
#' @rdname setApiKey-methods
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("missing"),
definition = function(api = NULL) {
REARandom@apiKey = getOption("reaRandomKey")
}, valueClass = "REARandom")
#' @title Random Integers
#' @description Method to create REARandom object used for Random.org method
#' call to get random integers.
#' @param id
#' @param n
#' @param min
#' @param max
#' @param replacement
#' @param base
#' @docType methods
#' @export setIntegers
setGeneric("setIntegers",
def = function(id, n, min, max, replacement, base) {
standardGeneric("setIntegers")
}, valueClass = "REARandom")
#' @importFrom jsonlite::serializeJSON
#'
setMethod(f = "setIntegers",
signature("numeric", "numeric", "numeric", "numeric", "logical", "numeric"),
definition = function(id = 42, n = 1, min = 0, max = 100,
replacement = FALSE, base = 10) {
# Check number of values requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in [1, 1e4]")
# Check minimum and maximum value parameters
if (!(min %in% c(-1e9:1e9)) || !(max %in% c(-1e9:1e9))) {
stop("Minimum or Maximum value outside of [-1e9, 1e9]")
}
# Set the method slot
REARandom@method <- "generateIntegers"
# Set the ID slot
REARandom@id <- id
# Set API Method parameters
REARandom@parameters <- as.list("n" = n, "min" = min, "max" = max,
"replacement" = replacement, "base" = base)
}, valueClass = "REARandom") # End Method declaration
setGeneric("setDecimals",
def = function(id, n, decimalPlaces, replacement) {
standardGeneric("setDecimals")
}, valueClass = "REARandom")
setMethod(f = "setDecimals",
signature("numeric", "numeric", "numeric", "logical"),
definition = function(id = 42, n = 1, decimalPlaces = 1,
replacement = FALSE) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in [1, 1e4]")
# Check number of values beyond the decimal within allowed range
if (!(decimalPlaces %in% c(1:20))) stop("Parameter decimalPlaces must be in [1, 20]")
# Set the method slot
REARandom@method <- "generateDecimalFractions"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"decimalPlaces" = decimalPlaces,
"replacement" = replacement)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setNormal",
def = function(id, n, mean, standardDeviation, significantDigits) {
standardGeneric("setNormal")
}, valueClass = "REARandom")
setMethod(f = "setNormal",
signature("numeric", "numeric", "numeric", "numeric", "numeric"),
definition = function(id = 42, n = 1, mean = 0,
standardDeviation = 1, significantDigits = 2) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(mean %in% c(-1e6:1e6)) || !(standardDeviation %in% c(-1e6:1e6))) {
stop("Mean parameter outside of [-1e6, 1e6]")
}
# Check number of values beyond the decimal within allowed range
if (!(significantDigits %in% c(2:20))) stop("Parameter decimalPlaces must be in [2, 20]")
# Set the method slot
REARandom@method <- "generateGaussians"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"mean" = mean,
"standardDeviation" = standardDeviation,
"significantDigits" = significantDigits)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setStrings",
def = function(id, n, length, characters, replacement) {
standardGeneric("setStrings")
}, valueClass = "REARandom")
setMethod(f = "setStrings",
signature("numeric", "numeric", "numeric", "character", "logical"),
definition = function(id = 42, n = 1, length = 1,
characters = c(letters, LETTERS, c(0:9),
"!", "@", "#", "$", "%", "^", "&",
"-", ",", "?", "|", ":", ";", "<",
">", ",", ".", "_"),
replacement = FALSE) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(length %in% c(1:20))) stop("Length parameter outside of [1, 20]")
# Check number of values beyond the decimal within allowed range
if (!(nchar(characters) %in% c(1:80))) {
stop(paste("Characters parameter must include 1-80 characters",
"from which to construct the random string."))
}
# Set the method slot
REARandom@method <- "generateStrings"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"length" = length,
"characters" = characters,
"replacement" = replacement)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setUniqueID",
def = function(id, n) {
standardGeneric("setUniqueID")
}, valueClass = "REARandom")
setMethod(f = "setUniqueID",
signature("numeric", "numeric"),
definition = function(id = 42, n = 1) {
# Check number of random numbers requested
if (!(n %in% c(1:1e3))) stop("Parameter n must be in [1, 1e3]")
# Set the method slot
REARandom@method <- "generateUUIDs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setBLOBs",
def = function(id, n, size, format) {
standardGeneric("setBLOBs")
}, valueClass = "REARandom")
setMethod(f = "setBLOBs",
signature("numeric", "numeric", "numeric", "character"),
definition = function(id = 42, n = 1, size = 8, format = "base64") {
# Check number of random numbers requested
if (!(n %in% c(1:100))) stop("Parameter n must be in [1, 100]")
# Check the size parameter
if ((size %% 8) != 0) stop("Size parameter must be divisible by 8")
# Check the format parameter
if (!(format %in% c("base64", "hex"))) {
stop(paste("Format parameter only accepts 'base64' or 'hex'",
"as arguments.  The default is 'base64'."))
}
# Set the method slot
REARandom@method <- "generateBlobs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n, "size" = size, "format" = format)
}, valueClass = "REARandom") # End of Method declaration
library(reaRandom)
library(roxygen2)
install.packages("devtools", repos = "https://cran.rstudio.com")
devtools::install_github("yihui/roxygen2")
8^3
packrat::set_opts(vcs.ignore.src = TRUE, use.cache = TRUE, external.packages = c("devtools", "roxygen2", "knitr"))
remove.packages("devtools")
remove.packages("roxygen2")
packrat::disable()
install.packages("packrat")
packrat::init(options = list(external.packages = c("devtools", "roxygen2", "knitr")))
