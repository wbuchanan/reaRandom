if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(mean %in% c(-1e6:1e6)) || !(standardDeviation %in% c(-1e6:1e6))) {
stop("Mean parameter outside of [-1e6, 1e6]")
}
# Check number of values beyond the decimal within allowed range
if (!(significantDigits %in% c(2:20))) stop("Parameter decimalPlaces must be in [2, 20]")
# Set the method slot
REARandom@method <- "generateGaussians"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"mean" = mean,
"standardDeviation" = standardDeviation,
"significantDigits" = significantDigits)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setStrings",
def = function(id, n, length, characters, replacement) {
standardGeneric("setStrings")
}, valueClass = "REARandom")
setMethod(f = "setStrings",
signature("numeric", "numeric", "numeric", "character", "logical"),
definition = function(id = 42, n = 1, length = 1,
characters = c(letters, LETTERS, c(0:9),
"!", "@", "#", "$", "%", "^", "&",
"-", ",", "?", "|", ":", ";", "<",
">", ",", ".", "_"),
replacement = FALSE) {
# Check number of random numbers requested
if (!(n %in% c(1:1e4))) stop("Parameter n must be in c(1:1e4)")
# Check the value of mean/standardDeviation in acceptable range
if (!(length %in% c(1:20))) stop("Length parameter outside of [1, 20]")
# Check number of values beyond the decimal within allowed range
if (!(nchar(characters) %in% c(1:80))) {
stop(paste("Characters parameter must include 1-80 characters",
"from which to construct the random string."))
}
# Set the method slot
REARandom@method <- "generateStrings"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n,
"length" = length,
"characters" = characters,
"replacement" = replacement)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setUniqueID",
def = function(id, n) {
standardGeneric("setUniqueID")
}, valueClass = "REARandom")
setMethod(f = "setUniqueID",
signature("numeric", "numeric"),
definition = function(id = 42, n = 1) {
# Check number of random numbers requested
if (!(n %in% c(1:1e3))) stop("Parameter n must be in [1, 1e3]")
# Set the method slot
REARandom@method <- "generateUUIDs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n)
}, valueClass = "REARandom") # End of Method declaration
setGeneric("setBLOBs",
def = function(id, n, size, format) {
standardGeneric("setBLOBs")
}, valueClass = "REARandom")
setMethod(f = "setBLOBs",
signature("numeric", "numeric", "numeric", "character"),
definition = function(id = 42, n = 1, size = 8, format = "base64") {
# Check number of random numbers requested
if (!(n %in% c(1:100))) stop("Parameter n must be in [1, 100]")
# Check the size parameter
if ((size %% 8) != 0) stop("Size parameter must be divisible by 8")
# Check the format parameter
if (!(format %in% c("base64", "hex"))) {
stop(paste("Format parameter only accepts 'base64' or 'hex'",
"as arguments.  The default is 'base64'."))
}
# Set the method slot
REARandom@method <- "generateBlobs"
# Set the ID slot
REARandom@id <- id
# Set the API method parameters
REARandom@parameters <- as.list("n" = n, "size" = size, "format" = format)
}, valueClass = "REARandom") # End of Method declaration
library(reaRandom)
library(roxygen2)
install.packages("devtools", repos = "https://cran.rstudio.com")
devtools::install_github("yihui/roxygen2")
8^3
packrat::set_opts(vcs.ignore.src = TRUE, use.cache = TRUE, external.packages = c("devtools", "roxygen2", "knitr"))
remove.packages("devtools")
remove.packages("roxygen2")
packrat::disable()
install.packages("packrat")
packrat::init(options = list(external.packages = c("devtools", "roxygen2", "knitr")))
url <- "https://api.random.org/json-rpc/1/invoke"
request <- '{"jsonrpc":"2.0","method":"generateIntegers","params":{"apiKey":"00000000-0000-0000-0000-000000000000","n":10,"min":1,"max":10,"replacement":true,"base":10},"id":28324}'
RCurl::httpHEAD(url, request)
RCurl::httpPUT(url, request)
x <- RCurl::httpPUT(url, request)
class(x)
packrat::set_opts(external.packages = "")
packrat::snapshot(prompt = FALSE)
packrat::restore(prompt = FALSE)
library(reaRandom)
?reaRandom
12585.23 / 35345.10
?setClass
library(reaRandom)
x <- reaRandom("d19bdb48-1652-4cce-bcd6-bf535505169e")
x <- new("REARandom")
x
x <- new("REARandom").setApiKey("d19bdb48-1652-4cce-bcd6-bf535505169e")
x.setApiKey("d19bdb48-1652-4cce-bcd6-bf535505169e")
setApiKey("d19bdb48-1652-4cce-bcd6-bf535505169e")
#' Defines the base object used for API requests
#' @title REARandom
#' @rdname REARandom-class
#' @author Billy Buchanan
#' @docType class
#' @aliases reaRandom-class
#' @details Generates a new S4 object with methods to access random numbers
#' provided by Random.org's API
#' @slot requestHome The URL where the API requests will be submitted
#' @slot apiKey The API Key for Random.org API Access
#' @slot jsonrpc The version of the JSONRPC protocol
#' @slot method The API method call to issue
#' @slot parameters The parameters to be passed to the API Method
#' @slot id An ID variable used to match requests with payloads
#' @import methods
#' @export REARandom
#' @exportClass REARandom
#'
REARandom <- setClass(Class = "REARandom",
representation(requestHome = "character",
apiKey = "character",
jsonrpc = "character",
method = "character",
parameters = "character",
id = "numeric"))
# Validation function for Class REARandom
validREARandom <- function(object) {
if (object@requestHome != "https://api.random.org/json-rpc/1/invoke") FALSE
if (object@jsonrpc != "2.0") FALSE
if (is.null(object@apiKey) || is.na(object@apiKey)) FALSE
else TRUE
}
# Sets the validation function for object initialization
setValidity("REARandom", validREARandom)
# Initialization method for REARandom class
setMethod("initialize", "REARandom",
function(.Object) {
.Object@requestHome = "https://api.random.org/json-rpc/1/invoke"
.Object@jsonrpc = "2.0"
return(.Object)
}, valueClass = "REARandom"
)
#' Generic method declaration for API Key setter
#' @title setApiKey
#' @description Method used to set the ApiKey member of the REARandom class
#' @param api A character string with the API key, a file name containing the API key, or NULL value
#' @rdname setApiKey
#' @family REARandom Constructor Methods
#' @docType methods
#'
setGeneric("setApiKey",
def = function(api) {
standardGeneric("setApiKey")
}, valueClass = "REARandom")
#' Method used to allow user to pass a file name/string with the API key
#' @title setApiKey
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("character"),
definition = function(api = "character") {
apiKey <- ""
tryCatch({
apiKey <- scan(api, what = "character")
}, error = function(e) {
apiKey <- api
},
finally = {
REARandom@apiKey = apiKey
})
}, valueClass = "REARandom")
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("missing"),
definition = function(api = NULL) {
REARandom@apiKey = getOption("reaRandomKey")
}, valueClass = "REARandom")
#' Function to construct new REARandom class objects
#' @title reaRandom
#' @description Function used to create new REARandom class objects
#' @param api Takes a single character argument with either a file containing
#' the api key for Random.org, the key itself, or a NULL value.
#' @return Returns an object of class REARandom
#' @docType methods
#' @examples \dontrun{
#'
#' # Create a new REARandom object in x with made up API key passed as an
#' # argument to the function
#' x <- reaRandom(api = "ABCD123456789abcd")
#'
#' # Same as above but assuming the API key is stored in a file on the local
#' # system
#' x <- reaRandom(api = "~/.randomOrgApiKey")
#'
#' # Same as above assuming the API key is stored as an option named
#' # "reaRandomKey"
#' x <- reaRandom()
#'
#' }
#' @export reaRandom
#'
reaRandom <- function(api = NULL) {
reaRandomObject <- new("REARandom")
reaRandomObject.setApiKey(api)
validObject(reaRandomObject)
return(reaRandomObject)
}
x <- reaRandom("d19bdb48-1652-4cce-bcd6-bf535505169e")
?setMethod
x <- setApiKey("d19bdb48-1652-4cce-bcd6-bf535505169e")
?option
options("reaRandomKey" = "d19bdb48-1652-4cce-bcd6-bf535505169e")
x <- reaRandom()
debug(reaRandom())
debug(reaRandom
)
x <- reaRandom()
#' Defines the base object used for API requests
#' @title REARandom
#' @rdname REARandom-class
#' @author Billy Buchanan
#' @docType class
#' @aliases reaRandom-class
#' @details Generates a new S4 object with methods to access random numbers
#' provided by Random.org's API
#' @slot requestHome The URL where the API requests will be submitted
#' @slot apiKey The API Key for Random.org API Access
#' @slot jsonrpc The version of the JSONRPC protocol
#' @slot method The API method call to issue
#' @slot parameters The parameters to be passed to the API Method
#' @slot id An ID variable used to match requests with payloads
#' @import methods
#' @export REARandom
#' @exportClass REARandom
#'
REARandom <- setClass(Class = "REARandom",
representation(requestHome = "character",
apiKey = "character",
jsonrpc = "character",
method = "character",
parameters = "character",
id = "numeric"))
# Validation function for Class REARandom
validREARandom <- function(object) {
if (object@requestHome != "https://api.random.org/json-rpc/1/invoke") FALSE
if (object@jsonrpc != "2.0") FALSE
if (is.null(object@apiKey) || is.na(object@apiKey)) FALSE
else TRUE
}
# Sets the validation function for object initialization
setValidity("REARandom", validREARandom)
# Initialization method for REARandom class
setMethod("initialize", "REARandom",
function(.Object) {
.Object@requestHome = "https://api.random.org/json-rpc/1/invoke"
.Object@jsonrpc = "2.0"
return(.Object)
}, valueClass = "REARandom"
)
#' Generic method declaration for API Key setter
#' @title setApiKey
#' @description Method used to set the ApiKey member of the REARandom class
#' @param api A character string with the API key, a file name containing the API key, or NULL value
#' @rdname setApiKey
#' @family REARandom Constructor Methods
#' @docType methods
#'
setGeneric("setApiKey",
def = function(api) {
standardGeneric("setApiKey")
}, valueClass = "REARandom")
#' Method used to allow user to pass a file name/string with the API key
#' @title setApiKey
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("character"),
definition = function(api = "character") {
apiKey <- ""
tryCatch({
apiKey <- scan(api, what = "character")
}, error = function(e) {
apiKey <- api
},
finally = {
REARandom@apiKey = apiKey
})
}, valueClass = "REARandom")
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("missing"),
definition = function(api = NULL) {
REARandom@apiKey = getOption("reaRandomKey")
}, valueClass = "REARandom")
#' Function to construct new REARandom class objects
#' @title reaRandom
#' @description Function used to create new REARandom class objects
#' @param api Takes a single character argument with either a file containing
#' the api key for Random.org, the key itself, or a NULL value.
#' @return Returns an object of class REARandom
#' @docType methods
#' @examples \dontrun{
#'
#' # Create a new REARandom object in x with made up API key passed as an
#' # argument to the function
#' x <- reaRandom(api = "ABCD123456789abcd")
#'
#' # Same as above but assuming the API key is stored in a file on the local
#' # system
#' x <- reaRandom(api = "~/.randomOrgApiKey")
#'
#' # Same as above assuming the API key is stored as an option named
#' # "reaRandomKey"
#' x <- reaRandom()
#'
#' }
#' @export reaRandom
#'
reaRandom <- function(...) {
reaRandomObject <- new("REARandom", ...)
Object.setApiKey(api)
validObject(reaRandomObject)
return(reaRandomObject)
}
x <- reaRandom()
#' Defines the base object used for API requests
#' @title REARandom
#' @rdname REARandom-class
#' @author Billy Buchanan
#' @docType class
#' @aliases reaRandom-class
#' @details Generates a new S4 object with methods to access random numbers
#' provided by Random.org's API
#' @slot requestHome The URL where the API requests will be submitted
#' @slot apiKey The API Key for Random.org API Access
#' @slot jsonrpc The version of the JSONRPC protocol
#' @slot method The API method call to issue
#' @slot parameters The parameters to be passed to the API Method
#' @slot id An ID variable used to match requests with payloads
#' @import methods
#' @export REARandom
#' @exportClass REARandom
#'
REARandom <- setClass(Class = "REARandom",
representation(requestHome = "character",
apiKey = "character",
jsonrpc = "character",
method = "character",
parameters = "character",
id = "numeric"))
# Validation function for Class REARandom
validREARandom <- function(object) {
if (object@requestHome != "https://api.random.org/json-rpc/1/invoke") FALSE
if (object@jsonrpc != "2.0") FALSE
if (is.null(object@apiKey) || is.na(object@apiKey)) FALSE
else TRUE
}
# Sets the validation function for object initialization
setValidity("REARandom", validREARandom)
# Initialization method for REARandom class
setMethod("initialize", "REARandom",
function(.Object) {
.Object@requestHome = "https://api.random.org/json-rpc/1/invoke"
.Object@jsonrpc = "2.0"
return(.Object)
}, valueClass = "REARandom"
)
#' Generic method declaration for API Key setter
#' @title setApiKey
#' @description Method used to set the ApiKey member of the REARandom class
#' @param api A character string with the API key, a file name containing the API key, or NULL value
#' @rdname setApiKey
#' @family REARandom Constructor Methods
#' @docType methods
#'
setGeneric("setApiKey",
def = function(api) {
standardGeneric("setApiKey")
}, valueClass = "REARandom")
#' Method used to allow user to pass a file name/string with the API key
#' @title setApiKey
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("character"),
definition = function(api = "character") {
apiKey <- ""
tryCatch({
apiKey <- scan(api, what = "character")
}, error = function(e) {
apiKey <- api
},
finally = {
REARandom@apiKey = apiKey
})
}, valueClass = "REARandom")
#' @family REARandom Constructor Methods
#' @rdname setApiKey
#' @export setApiKey
#'
setMethod(f = "setApiKey", signature("missing"),
definition = function(api = NULL) {
REARandom@apiKey = getOption("reaRandomKey")
}, valueClass = "REARandom")
#' Function to construct new REARandom class objects
#' @title reaRandom
#' @description Function used to create new REARandom class objects
#' @param api Takes a single character argument with either a file containing
#' the api key for Random.org, the key itself, or a NULL value.
#' @return Returns an object of class REARandom
#' @docType methods
#' @examples \dontrun{
#'
#' # Create a new REARandom object in x with made up API key passed as an
#' # argument to the function
#' x <- reaRandom(api = "ABCD123456789abcd")
#'
#' # Same as above but assuming the API key is stored in a file on the local
#' # system
#' x <- reaRandom(api = "~/.randomOrgApiKey")
#'
#' # Same as above assuming the API key is stored as an option named
#' # "reaRandomKey"
#' x <- reaRandom()
#'
#' }
#' @export reaRandom
#'
reaRandom <- function(...) {
reaRandomObject <- new("REARandom", ...)
.Object.setApiKey(api)
validObject(reaRandomObject)
return(reaRandomObject)
}
x <- reaRandom()
api <- "d19bdb48-1652-4cce-bcd6-bf535505169e"
scan(api, what = "character")
tryCatch(apiKey <- scan(api, what = "character"), apiKey <- api)
tryCatch(apiKey <- scan(api, what = "character"), error = function() apiKey <- api)
tryCatch(apiKey <- scan(api, what = "character"), error = function(e) apiKey <- api)
?try
rm(apiKey)
tryCatch(apiKey <- scan(api, what = "character"), error = function(e) { apiKey <- api })
tryCatch(apiKey <- scan(api, what = "character"), error = function(e)  apiKey <- api )
tryCatch(apiKey <- scan(api, what = "character"), error = function()  apiKey <- api )
tryCatch(scan(api, what = "character"), error = function(e) e)
x <- tryCatch(scan(api, what = "character"), error = function(e) e)
class(x)
x <- tryCatch(scan(api, what = "character"), error = function(e) )
x <- tryCatch(scan(api, what = "character"), error = function(e) {} )
x <- tryCatch(scan(api, what = "character"), error = NULL )
x <- tryCatch(scan(api, what = "character"), error = function(e) e, finally = "")
x <- tryCatch(scan(api, what = "character"))
x <- withCallingHandlers(scan(api, what = "character"))
x <- withCallingHandlers(scan(api, what = "character"), )
x <- withCallingHandlers(scan(api, what = "character"), api)
x <- withCallingHandlers(scan(api, what = "character"), error = api)
tryCatch(1, finally = print("hello"))
e <- simpleError("test error")
e <- simpleMessage("")
x <- tryCatch(scan(api, what = "character"), error = function(e) e, finally = "")
e <- simpleWarning("")
x <- tryCatch(scan(api, what = "character"), error = function(e) e, finally = "")
x <- tryCatch(scan(api, what = "character"), error = function(err) err, warning = function(e) e, finally = "")
x
x <- tryCatch(scan("~/Desktop/auto.json", what = "character"), error = function(err) err, warning = function(e) e, finally = "")
x <- tryCatch(scan(api, what = "character"), error = function(err) err, warning = function(e) e, finally = "")
e <- simpleError(NULL)
warn <- simpleWarning(NULL)
x <- function(REARandomObject, api = "character") {
e <- simpleError(message = NULL, call = api)
warn <- simpleWarning(message = NULL, call = api)
apiKey <- tryCatch(scan(api, what = "character"),
error = function(e) e,
warning = function(warn) warn)
return(apiKey) }
packrat::extlib("roxygen2")
packrat::with_extlib("roxygen2", expr = "roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))")
packrat::with_extlib("roxygen2", expr = {roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace', 'vignette'))})
packrat::set_opts(use.cache = TRUE, external.packages = c("roxygen2", "devtools"))
library(roxygen2)
library(devtools)
remove.packages("reaRandom")
packrat::disable()
library(reaRandom)
detach("package:reaRandom", unload=TRUE)
remove.packages("reaRandom")
